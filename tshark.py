import subprocess
import pandas as pd
import time
from datetime import datetime
import threading

# Function to run tshark in the background and capture packets
def run_tshark(interface):
    # Start tshark process to capture packets and output to a CSV file
    tshark_command = [
        "tshark", 
        "-i", interface,  # Network interface (e.g., "eth0" or "en0")
        "-T", "fields", 
        "-e", "frame.time_epoch", 
        "-e", "ip.src", 
        "-e", "ip.dst", 
        "-e", "tcp.srcport", 
        "-e", "tcp.dstport", 
        "-e", "frame.len", 
        "-e", "ip.proto", 
        "-e", "tcp.flags", 
        "-e", "udp.length", 
        "-E", "separator=,\n",  # CSV output
        "-a", "duration:3600"  # Capture duration (1 hour in this case)
    ]
    with open("packets.csv", "w") as output_file:
        subprocess.run(tshark_command, stdout=output_file, stderr=subprocess.PIPE)

# Function to process captured packets and apply model prediction
def process_packets_and_predict():
    while True:
        # Read the CSV file generated by tshark (use tailing if large, or process on interval)
        try:
            df = pd.read_csv("packets.csv", sep=",", header=None, 
                             names=["timestamp", "src_ip", "dst_ip", "src_port", "dst_port", 
                                    "frame_len", "protocol", "tcp_flags", "udp_len"])
            
            # Your preprocessing, feature extraction, and model prediction logic goes here
            # For example, if you have an LSTM model to predict DoS:
            # - Preprocess the dataframe
            # - Extract features (same as your current code)
            # - Make a prediction using your model

            # Check if an attack is detected (this is where you would use your model to make predictions)
            is_attack_detected = some_model_prediction_logic(df)
            if is_attack_detected:
                # Notify the user about the detected DoS attack
                notify_user_of_attack()

        except Exception as e:
            print(f"Error processing packets: {e}")
        
        # Sleep for a short duration before reading the next set of packets
        time.sleep(1)

# Function to simulate notifying a user
def notify_user_of_attack():
    print("DoS attack detected! Sending notification...")

# Run tshark in a separate thread
tshark_thread = threading.Thread(target=run_tshark, args=("eth0",))  # Replace 'eth0' with your network interface
tshark_thread.daemon = True
tshark_thread.start()

# Run the packet processing and prediction function
process_packets_and_predict()
